# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint8 = 0..255

type int8 = -128..127

type int32 = -2147483648..2147483647

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

int32 min_index_array(intP[..] t, int32 n_1)
  requires (_C_18 : (\offset_max(t) >= (n_1 - 1)));
  requires (_C_17 : (n_1 > 0));
behavior default:
  assigns \nothing;
  ensures (_C_16 : ((\result != 0) <==>
                     (\forall integer i_1;
                       (((0 <= i_1) && (i_1 < \at(n_1,Old))) ==>
                         ((\at(t,Old) + \result).intM <=
                           (\at(t,Old) + i_1).intM)))));
{  
   (var int32 i);
   
   (var int32 index);
   
   {  (_C_1 : (i = 0));
      (_C_2 : (index = 0));
      
      loop 
      behavior default:
        invariant (_C_7 : (\forall integer j_0;
                            (((0 <= j_0) && (j_0 < i)) ==>
                              ((t + index).intM <= (t + j_0).intM))));
      behavior default:
        invariant (_C_4 : ((_C_5 : (0 <= i)) && (_C_6 : (i <= n_1))));
      variant (_C_3 : (n_1 - i));
      while (true)
      {  
         {  (if (i < n_1) then () else 
            (goto while_0_break));
            
            {  (if ((_C_12 : (_C_11 : (t + i)).intM) <
                     (_C_10 : (_C_9 : (t + index)).intM)) then (_C_8 : (index = i)) else ());
               (_C_15 : (i = (_C_14 : ((_C_13 : (i + 1)) :> int32))))
            }
         }
      };
      (while_0_break : ());
      
      (return index)
   }
}
