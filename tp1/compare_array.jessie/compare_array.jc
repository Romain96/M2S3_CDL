# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint8 = 0..255

type int8 = -128..127

type int32 = -2147483648..2147483647

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

int32 compare_array(intP[..] s, intP[..] t, int32 n_1)
  requires (_C_21 : ((_C_22 : (\offset_min(s) <= 0)) &&
                      (_C_23 : (\offset_max(s) >= (n_1 - 1)))));
  requires (_C_18 : ((_C_19 : (\offset_min(t) <= 0)) &&
                      (_C_20 : (\offset_max(t) >= (n_1 - 1)))));
  requires (_C_17 : (n_1 > 0));
behavior default:
  assigns \nothing;
  ensures (_C_16 : ((\result != 0) <==>
                     (\forall integer i_1;
                       (((0 <= i_1) && (i_1 < \at(n_1,Old))) ==>
                         ((\at(s,Old) + i_1).intM == (\at(t,Old) + i_1).intM)))));
{  
   (var int32 i);
   
   (var int32 __retres);
   
   {  (_C_1 : (i = 0));
      
      loop 
      behavior default:
        invariant (_C_6 : (\forall integer j_0;
                            (((0 <= j_0) && (j_0 < i)) ==>
                              ((s + j_0).intM == (t + j_0).intM))));
      behavior default:
        invariant (_C_3 : ((_C_4 : (0 <= i)) && (_C_5 : (i <= n_1))));
      variant (_C_2 : (n_1 - i));
      while (true)
      {  
         {  (if (i < n_1) then (if ((_C_10 : (_C_9 : (s + i)).intM) ==
                                     (_C_8 : (_C_7 : (t + i)).intM)) then () else 
                               (goto while_0_break)) else 
            (goto while_0_break));
            
            {  (_C_13 : (i = (_C_12 : ((_C_11 : (i + 1)) :> int32))))
            }
         }
      };
      (while_0_break : ());
      (_C_15 : (__retres = (_C_14 : ((if (i == n_1) then 1 else 0) :> int32))));
      
      (return __retres)
   }
}
